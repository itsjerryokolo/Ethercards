type Account @entity {
  "Ethereum Address"
  id: ID!
  nftsOwned: [Nft!]! @derivedFrom (field:"deployer")
  ogCardsOwned: [OG!]! @derivedFrom (field:"account")
  founderCardsOwned: [Founder!]! @derivedFrom (field:"account")
  alphaCardsOwned: [Alpha!]! @derivedFrom (field:"account")
  transfers: [TransferEvent!]! @derivedFrom (field: "account")
  purchases: [SaleEvent!]! @derivedFrom (field: "buyer")
  refunds: [RefundEvent!]! @derivedFrom (field: "buyer")
  transactionReceipts: [Transaction!]! @derivedFrom (field: "account")
}

type Nft @entity {
  id: ID!
  deployer: Account
  currentOwner: Bytes
  ogCards: OG
  founderCards: Founder
  alphaCards: Alpha
  transaction: Transaction
}

type Contract @entity {
  id: ID!
  name: String!
  symbol: String!
  totalSupply: BigInt!
}

type Alpha @entity {
  id: ID!
  "All Alpha cards"
  nft: [Nft!]! @derivedFrom (field:"alphaCards")
  currentOwner: Bytes
  tokenURI: String
  traits: Trait
  saleEvent: SaleEvent
  account: Account
  transaction: Transaction
}

type OG @entity {
  id: ID!
  "All OG cards"
  nft: [Nft!]! @derivedFrom (field:"ogCards")
  currentOwner: Bytes
  tokenURI: String
  traits: Trait
  saleEvent: SaleEvent
  account: Account
  transaction: Transaction
}

type Founder @entity {
  id: ID!
  "All Founder cards"
  nft: [Nft!]! @derivedFrom (field:"founderCards")
  currentOwner: Bytes
  tokenURI: String
  traits: Trait
  saleEvent: SaleEvent
  account: Account
  transaction: Transaction
}

type Trait @entity {
  id: ID!
  nft: Nft
  traits: BigInt
  traitsClaimed: BigInt
  isClaimed: BigInt
  fullTraits: BigInt
}

type SaleEvent @entity {
  id: ID!
  buyer: Account
  amount: BigInt
  ogCards: OG
  founderCards: Founder
  alphaCards: Alpha
  nft: Nft
  transaction: Transaction
}

type TransferEvent @entity{
  "Token ID"
  id: ID!
  "Will display ZERO_ADDRESS for newly minted NFTs"
  sender: Bytes
  "Receipient of NFT"
  receiver: Bytes
  account: Account 
  "NFT transfered or newly minted"
  nftTransfered: Nft
  "Transaction data"
  transaction: Transaction
}

type RefundEvent @entity {
  id: ID!
  buyer: Account
  sent: BigInt
  refund: BigInt
  purchased: BigInt
  nft: Nft
  account: Account
  transaction: Transaction
}

type UpgradeEvent @entity {
  id: ID!
  upgradeToAlpha: BigInt
  upgradeToOG: BigInt
  transaction: Transaction
}

type Transaction @entity {
  id: ID!
  nft: Nft
  founderCards: Founder
  alphaCards: Alpha
  ogCards: OG
  account: Account
  saleEvent: SaleEvent
  refundEvent: RefundEvent
  transferEvent: TransferEvent
  upgradeToAlpha: UpgradeEvent
  upgradeToOG: UpgradeEvent
  hash: Bytes!
  timestamp: BigInt!
  block: BigInt!
}